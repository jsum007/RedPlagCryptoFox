aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
(Token.Keyword.Namespace, 'import')
(Token.Text, ' ')
(Token.Name.Namespace, 'java.io.FileInputStream')
(Token.Punctuation, ';')
(Token.Text, '\n')
(Token.Keyword.Namespace, 'import')
(Token.Text, ' ')
(Token.Name.Namespace, 'java.io.IOException')
(Token.Punctuation, ';')
(Token.Text, '\n')
(Token.Keyword.Namespace, 'import')
(Token.Text, ' ')
(Token.Name.Namespace, 'java.io.*')
(Token.Punctuation, ';')
(Token.Text, '\n')
(Token.Keyword.Namespace, 'import')
(Token.Text, ' ')
(Token.Name.Namespace, 'java.util.ArrayList')
(Token.Punctuation, ';')
(Token.Text, '\n')
(Token.Keyword.Namespace, 'import')
(Token.Text, ' ')
(Token.Name.Namespace, 'java.util.List')
(Token.Punctuation, ';')
(Token.Text, '\n')
(Token.Keyword.Namespace, 'import')
(Token.Text, ' ')
(Token.Name.Namespace, 'java.util.Map')
(Token.Punctuation, ';')
(Token.Text, '\n')
(Token.Keyword.Namespace, 'import')
(Token.Text, ' ')
(Token.Name.Namespace, 'java.util.HashMap')
(Token.Punctuation, ';')
(Token.Text, '\n')
(Token.Keyword.Namespace, 'import')
(Token.Text, ' ')
(Token.Name.Namespace, 'java.util.Scanner')
(Token.Punctuation, ';')
(Token.Text, '\n')
(Token.Text, '\n')
(Token.Keyword.Declaration, 'public')
(Token.Text, ' ')
(Token.Keyword.Declaration, 'class')
(Token.Text, ' ')
(Token.Name.Class, 'FetchAndProcessFromDisk')
(Token.Text, ' ')
(Token.Keyword.Declaration, 'implements')
(Token.Text, ' ')
(Token.Name, 'FetchAndProcess')
(Token.Text, ' ')
(Token.Punctuation, '{')
(Token.Text, '\n')
(Token.Text, '    ')
(Token.Keyword.Declaration, 'private')
(Token.Text, ' ')
(Token.Name, 'Map')
(Token.Operator, '<')
(Token.Name, 'String')
(Token.Punctuation, ',')
(Token.Text, ' ')
(Token.Name, 'String')
(Token.Operator, '>')
(Token.Text, ' ')
(Token.Name, 'data')
(Token.Punctuation, ';')
(Token.Text, '\n')
(Token.Text, '\n')
(Token.Text, '    ')
(Token.Name.Decorator, '@Override')
(Token.Text, '\n')
(Token.Text, '    ')
(Token.Keyword.Declaration, 'public')
(Token.Text, ' ')
(Token.Name, 'Map')
(Token.Operator, '<')
(Token.Name, 'String')
(Token.Punctuation, ',')
(Token.Text, ' ')
(Token.Name, 'String')
(Token.Operator, '>')
(Token.Text, ' ')
(Token.Name.Function, 'exposeData')
(Token.Punctuation, '(')
(Token.Punctuation, ')')
(Token.Text, ' ')
(Token.Punctuation, '{')
(Token.Text, '\n')
(Token.Text, '\t')
(Token.Keyword, 'return')
(Token.Text, ' ')
(Token.Name, 'data')
(Token.Punctuation, ';')
(Token.Text, '\n')
(Token.Text, '    ')
(Token.Punctuation, '}')
(Token.Text, '\n')
(Token.Text, '\n')
(Token.Text, '    ')
(Token.Name.Decorator, '@Override')
(Token.Text, '\n')
(Token.Text, '    ')
(Token.Keyword.Declaration, 'public')
(Token.Text, ' ')
(Token.Keyword.Type, 'void')
(Token.Text, ' ')
(Token.Name.Function, 'fetch')
(Token.Punctuation, '(')
(Token.Name, 'List')
(Token.Operator, '<')
(Token.Name, 'String')
(Token.Operator, '>')
(Token.Text, ' ')
(Token.Name, 'paths')
(Token.Punctuation, ')')
(Token.Text, ' ')
(Token.Punctuation, '{')
(Token.Text, '\n')
(Token.Text, '    \t ')
(Token.Name, 'data')
(Token.Operator, '=')
(Token.Keyword, 'new')
(Token.Text, ' ')
(Token.Name, 'HashMap')
(Token.Operator, '<')
(Token.Name, 'String')
(Token.Punctuation, ',')
(Token.Name, 'String')
(Token.Operator, '>')
(Token.Punctuation, '(')
(Token.Punctuation, ')')
(Token.Punctuation, ';')
(Token.Text, '\n')
(Token.Text, '    \t ')
(Token.Comment.Single, "// using '/' as seperator of filenames\n")
(Token.Text, '\n')
(Token.Text, '\t')
(Token.Comment.Single, '// Implement here\n')
(Token.Text, '    \t ')
(Token.Keyword, 'for')
(Token.Text, ' ')
(Token.Punctuation, '(')
(Token.Keyword.Type, 'int')
(Token.Text, ' ')
(Token.Name, 'i')
(Token.Text, ' ')
(Token.Operator, '=')
(Token.Text, ' ')
(Token.Literal.Number.Integer, '0')
(Token.Punctuation, ';')
(Token.Text, ' ')
(Token.Name, 'i')
(Token.Text, ' ')
(Token.Operator, '<')
(Token.Text, ' ')
(Token.Name, 'paths')
(Token.Punctuation, '.')
(Token.Name.Attribute, 'size')
(Token.Punctuation, '(')
(Token.Punctuation, ')')
(Token.Punctuation, ';')
(Token.Text, ' ')
(Token.Name, 'i')
(Token.Operator, '+')
(Token.Operator, '+')
(Token.Punctuation, ')')
(Token.Text, ' ')
(Token.Punctuation, '{')
(Token.Text, '\n')
(Token.Text, '    \t \t')
(Token.Name, 'Scanner')
(Token.Text, ' ')
(Token.Name, 'myObj')
(Token.Text, ' ')
(Token.Operator, '=')
(Token.Text, ' ')
(Token.Keyword, 'new')
(Token.Text, ' ')
(Token.Name, 'Scanner')
(Token.Punctuation, '(')
(Token.Name, 'System')
(Token.Punctuation, '.')
(Token.Name.Attribute, 'in')
(Token.Punctuation, ')')
(Token.Text, '\n')
(Token.Text, '    \t \t')
(Token.Name, 'String')
(Token.Text, ' ')
(Token.Name, 's')
(Token.Operator, '=')
(Token.Name, 'paths')
(Token.Punctuation, '.')
(Token.Name.Attribute, 'get')
(Token.Punctuation, '(')
(Token.Name, 'i')
(Token.Punctuation, ')')
(Token.Punctuation, ';')
(Token.Text, '\n')
(Token.Text, '    \t \t')
(Token.Name, 'File')
(Token.Text, ' ')
(Token.Name, 'f')
(Token.Text, ' ')
(Token.Operator, '=')
(Token.Text, ' ')
(Token.Keyword, 'new')
(Token.Text, ' ')
(Token.Name, 'File')
(Token.Punctuation, '(')
(Token.Name, 's')
(Token.Punctuation, ')')
(Token.Punctuation, ';')
(Token.Text, '\n')
(Token.Text, '\t\t\t')
(Token.Comment.Single, '// System.out.println(f.getName());\n')
(Token.Text, '\t\t\t')
(Token.Name, 'String')
(Token.Text, ' ')
(Token.Name, 'fn')
(Token.Operator, '=')
(Token.Name, 'f')
(Token.Punctuation, '.')
(Token.Name.Attribute, 'getName')
(Token.Punctuation, '(')
(Token.Punctuation, ')')
(Token.Punctuation, ';')
(Token.Text, '\n')
(Token.Text, '\t\t\t')
(Token.Name, 'BufferedReader')
(Token.Text, ' ')
(Token.Name, 'reader')
(Token.Punctuation, ';')
(Token.Text, '\n')
(Token.Text, '\t\t\t')
(Token.Keyword, 'try')
(Token.Punctuation, '{')
(Token.Text, '\n')
(Token.Text, '\t\t\t\t')
(Token.Name, 'reader')
(Token.Operator, '=')
(Token.Keyword, 'new')
(Token.Text, ' ')
(Token.Name, 'BufferedReader')
(Token.Punctuation, '(')
(Token.Keyword, 'new')
(Token.Text, ' ')
(Token.Name, 'FileReader')
(Token.Punctuation, '(')
(Token.Name, 's')
(Token.Punctuation, ')')
(Token.Punctuation, ')')
(Token.Punctuation, ';')
(Token.Text, '\n')
(Token.Text, '\t\t\t\t')
(Token.Name, 'String')
(Token.Text, ' ')
(Token.Name, 'line')
(Token.Text, ' ')
(Token.Operator, '=')
(Token.Text, ' ')
(Token.Name, 'reader')
(Token.Punctuation, '.')
(Token.Name.Attribute, 'readLine')
(Token.Punctuation, '(')
(Token.Punctuation, ')')
(Token.Punctuation, ';')
(Token.Text, '\n')
(Token.Text, '\t\t\t\t')
(Token.Keyword, 'while')
(Token.Punctuation, '(')
(Token.Name, 'line')
(Token.Text, ' ')
(Token.Operator, '!')
(Token.Operator, '=')
(Token.Text, ' ')
(Token.Keyword.Constant, 'null')
(Token.Punctuation, ')')
(Token.Punctuation, '{')
(Token.Text, '\n')
(Token.Text, '\t\t\t\t\t')
(Token.Name, 'String')
(Token.Text, ' ')
(Token.Name, 'value')
(Token.Text, ' ')
(Token.Operator, '=')
(Token.Text, ' ')
(Token.Name, 'data')
(Token.Punctuation, '.')
(Token.Name.Attribute, 'get')
(Token.Punctuation, '(')
(Token.Name, 'line')
(Token.Punctuation, ')')
(Token.Punctuation, ';')
(Token.Text, '\n')
(Token.Text, '\t\t\t\t\t')
(Token.Keyword, 'if')
(Token.Punctuation, '(')
(Token.Name, 'value')
(Token.Operator, '!')
(Token.Operator, '=')
(Token.Text, ' ')
(Token.Keyword.Constant, 'null')
(Token.Punctuation, ')')
(Token.Punctuation, '{')
(Token.Text, '\n')
(Token.Text, '\t\t\t\t\t\t')
(Token.Name, 'String')
(Token.Text, ' ')
(Token.Name, 'nn')
(Token.Operator, '=')
(Token.Name, 'value')
(Token.Operator, '+')
(Token.Literal.String, '"')
(Token.Literal.String, ',')
(Token.Literal.String, '"')
(Token.Operator, '+')
(Token.Name, 'fn')
(Token.Punctuation, ';')
(Token.Text, '\n')
(Token.Text, '\t\t\t\t\t\t')
(Token.Comment.Single, '// System.out.println(nn);\n')
(Token.Text, '\t\t\t\t\t\t')
(Token.Name, 'data')
(Token.Punctuation, '.')
(Token.Name.Attribute, 'put')
(Token.Punctuation, '(')
(Token.Name, 'line')
(Token.Punctuation, ',')
(Token.Name, 'nn')
(Token.Punctuation, ')')
(Token.Punctuation, ';')
(Token.Text, '\n')
(Token.Text, '\t\t\t\t\t')
(Token.Punctuation, '}')
(Token.Text, '\n')
(Token.Text, '\t\t\t\t\t')
(Token.Keyword, 'else')
(Token.Punctuation, '{')
(Token.Text, '\n')
(Token.Text, '\t\t\t\t\t\t')
(Token.Name, 'data')
(Token.Punctuation, '.')
(Token.Name.Attribute, 'put')
(Token.Punctuation, '(')
(Token.Name, 'line')
(Token.Punctuation, ',')
(Token.Name, 'fn')
(Token.Punctuation, ')')
(Token.Punctuation, ';')
(Token.Text, '\n')
(Token.Text, '\t\t\t\t\t')
(Token.Punctuation, '}')
(Token.Text, '\n')
(Token.Text, '\t\t\t\t\t')
(Token.Name, 'line')
(Token.Operator, '=')
(Token.Name, 'reader')
(Token.Punctuation, '.')
(Token.Name.Attribute, 'readLine')
(Token.Punctuation, '(')
(Token.Punctuation, ')')
(Token.Punctuation, ';')
(Token.Text, '\n')
(Token.Text, '\t\t\t\t')
(Token.Punctuation, '}')
(Token.Text, '\n')
(Token.Text, '\t\t\t')
(Token.Punctuation, '}')
(Token.Text, ' ')
(Token.Keyword, 'catch')
(Token.Punctuation, '(')
(Token.Name, 'IOException')
(Token.Text, ' ')
(Token.Name, 'e')
(Token.Punctuation, ')')
(Token.Punctuation, '{')
(Token.Text, '\n')
(Token.Text, '\t\t\t\t')
(Token.Name, 'e')
(Token.Punctuation, '.')
(Token.Name.Attribute, 'printStackTrace')
(Token.Punctuation, '(')
(Token.Punctuation, ')')
(Token.Punctuation, ';')
(Token.Text, '\n')
(Token.Text, '\t\t\t')
(Token.Punctuation, '}')
(Token.Text, '\n')
(Token.Text, '\t\t\t')
(Token.Comment.Single, '// System.out.println(crunchifyList.get(i));\n')
(Token.Text, '\t\t')
(Token.Punctuation, '}')
(Token.Text, '\n')
(Token.Text, '\t\t')
(Token.Comment.Single, '// System.out.println(data);\n')
(Token.Text, '    ')
(Token.Punctuation, '}')
(Token.Text, '\n')
(Token.Punctuation, '}')
(Token.Text, '\n')
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
